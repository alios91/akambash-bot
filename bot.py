import json
import random
import os
import logging
import asyncio
from datetime import datetime, time

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiohttp import web

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
BASE_URL = os.getenv("BASE_URL")

if not BOT_TOKEN or not BASE_URL:
    raise ValueError("‚ùå BOT_TOKEN –∏–ª–∏ BASE_URL –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ Environment Variables –Ω–∞ Render!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ JSON
with open("words.json", "r", encoding="utf-8") as f:
    WORDS = json.load(f)

user_settings = {}  # user_id: {"lang": "ru", "autosend": True, "used_words": set()}

lang_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†—É—Å—Å–∫–∏–π"), KeyboardButton(text="English"), KeyboardButton(text="T√ºrk√ße")]
    ],
    resize_keyboard=True
)

yes_no_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=lang_kb)

@dp.message(F.text.in_(["–†—É—Å—Å–∫–∏–π", "English", "T√ºrk√ße"]))
async def choose_language(message: Message):
    lang_map = {
        "–†—É—Å—Å–∫–∏–π": "ru",
        "English": "en",
        "T√ºrk√ße": "tr"
    }
    user_settings[message.from_user.id] = {
        "lang": lang_map[message.text],
        "autosend": False,
        "used_words": set()
    }
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–ª–æ–≤–∞ 5 —Ä–∞–∑ –≤ –¥–µ–Ω—å –¥–æ 18:00 –∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ –≤ 21:00?",
                         reply_markup=yes_no_kb)

@dp.message(F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def set_autosend(message: Message):
    if message.from_user.id not in user_settings:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —á–µ—Ä–µ–∑ /start.")
        return

    if message.text == "–î–∞":
        user_settings[message.from_user.id]["autosend"] = True
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–ª–æ–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è.")
    else:
        user_settings[message.from_user.id]["autosend"] = False
        await message.answer("–•–æ—Ä–æ—à–æ, –Ω–µ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

@dp.message(F.text)
async def echo_handler(message: Message):
    await message.answer(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {message.text}")

def get_random_word(user_id):
    lang = user_settings[user_id]["lang"]
    used = user_settings[user_id]["used_words"]

    available = [w for w in WORDS[lang] if w[lang] not in used]

    if not available:  # –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–ª–æ–≤–∞, –æ–±–Ω—É–ª—è–µ–º
        used.clear()
        available = WORDS[lang]

    word = random.choice(available)
    used.add(word[lang])
    return f"{word.get(lang)} ‚Äî {word.get('ab')}"

async def scheduled_words():
    send_times = [time(9, 0), time(11, 0), time(13, 0), time(15, 0), time(17, 0)]
    night_time = time(21, 0)

    while True:
        now = datetime.now().time()

        for uid, settings in user_settings.items():
            if settings["autosend"]:
                for st in send_times:
                    if now.hour == st.hour and now.minute == st.minute:
                        try:
                            await bot.send_message(uid, f"üìö –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ: {get_random_word(uid)}")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ª–æ–≤–∞ {uid}: {e}")

                if now.hour == night_time.hour and now.minute == night_time.minute:
                    try:
                        await bot.send_message(uid, "üåô –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {uid}: {e}")

        await asyncio.sleep(60)

async def on_startup(app: web.Application):
    webhook_url = f"{BASE_URL}/{BOT_TOKEN}"
    await bot.set_webhook(webhook_url)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    asyncio.create_task(scheduled_words())

async def on_shutdown(app: web.Application):
    await bot.delete_webhook()
    await bot.session.close()

async def handle(request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response()

async def health(request):
    return web.Response(text="‚úÖ Bot is running")

app = web.Application()
app.router.add_post(f'/{BOT_TOKEN}', handle)
app.router.add_get("/", health)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
